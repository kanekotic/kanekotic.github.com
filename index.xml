<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kanekotic on Kanekotic</title>
    <link>http://kanekotic.github.io/</link>
    <description>Recent content in Kanekotic on Kanekotic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Update your npm package dependencies and release with Travis</title>
      <link>http://kanekotic.github.io/post/2018-07-11-travis-ci-update-npm-package-dependencies-and-release/</link>
      <pubDate>Wed, 11 Jul 2018 09:27:28 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/2018-07-11-travis-ci-update-npm-package-dependencies-and-release/</guid>
      <description>&lt;p&gt;As a member of the community that like to generate npm packages like libraries and cli tools, sometimes is difficult to maintain everything and keep your package up to date in the dependencies side. I am a fan of having static dependencies as versioning is not being held correctly in most of the npm world. So if you dont use exact packages you could run in the issue that a broken change makes from the night to the morning your awesome tool to break.&lt;/p&gt;

&lt;p&gt;This practice could bring a headache to keep dependencies up to date because is a manual process. And manual process tend to be time consuming (at this point in time I have ~17 npm packages) meaning that if i want to simply do normal maintenance i will have to run everything for all those in maybe weekly or monthly bases.&lt;/p&gt;

&lt;p&gt;So is a bit of a no situation for maintainers, but if you dont maintain your package people will not use it, because there is a concern about how active the project is, even if there are no open issues. For solving both of this things what i have decided is to ad to my CI/CD pipeline a script that runs only on cron jobs from travis ci.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;os: osx
language: node_js
node_js:
  - node
script:
  - yarn test:cov
after_success:
  - if [[ &amp;quot;${TRAVIS_EVENT_TYPE}&amp;quot; = &amp;quot;cron&amp;quot; ]]; then ./upgrade.sh; fi
deploy:
  skip_cleanup: true
  provider: npm
  email: $NPM_EMAIL
  api_key: $NPM_TOKEN
  on:
    tags: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as you can see that is the normal &lt;code&gt;.travis.yml&lt;/code&gt; for deploying into npm (you will have to define &lt;code&gt;NPM_EMAIL&lt;/code&gt; and &lt;code&gt;NPM_TOKEN&lt;/code&gt; as enviroment variables in your build configuration), the main diference is the step after success that if its the cron job going will run the next script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

set -e

git config --global user.email $GH_EMAIL
git config --global user.name $GH_USER

git remote add origin-master https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git &amp;gt; /dev/null 2&amp;gt;&amp;amp;1

git fetch origin-master
git checkout -b master-local origin-master/master

yarn upgrade --latest
git add .
git commit --allow-empty -m &amp;quot;updated dependencies [skip ci]&amp;quot;

yarn test
yarn version --patch

git push --quiet origin-master master-local:master
git push --quiet origin-master master-local:master --tags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this script attaches the current state to a branch makes, upgrades the dependencies and if everything works fine generates a new commit and deploy a patch of the packages (you will have to define &lt;code&gt;GH_EMAIL&lt;/code&gt;, &lt;code&gt;GH_USER&lt;/code&gt; and &lt;code&gt;GH_TOKEN&lt;/code&gt; as environment variables in your build configuration).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create your User/Organization GitHub Page with Hugo &#43; Travis</title>
      <link>http://kanekotic.github.io/post/2018-07-04-deploy-hugo-with-travis/</link>
      <pubDate>Wed, 04 Jul 2018 08:35:42 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/2018-07-04-deploy-hugo-with-travis/</guid>
      <description>&lt;p&gt;I have just finished migrating my static blog from Hexo to Hugo and one of the main things I care about is to be able to do continuous deployment of my profile and blog. There are quite a few blog posts out there but they are based on using shell scripts and it really becomes a pain to give permissions etc. In the next few lines you will see the simplest way I have found to do this (and is currently as this blog post is being published).&lt;/p&gt;

&lt;p&gt;You will need to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Github account.&lt;/li&gt;
&lt;li&gt;A Travis CI account.&lt;/li&gt;
&lt;li&gt;A Github repository with source code of your web page with Hugo (*1)&lt;/li&gt;
&lt;li&gt;A Github repository with the name &lt;code&gt;&amp;lt;your User or Organization&amp;gt;.github.com&lt;/code&gt; (ex. kanekotic.github.com) (*2).&lt;/li&gt;
&lt;li&gt;A developer token from GitHub with commit capabilities (can create in github &lt;code&gt;Settings -&amp;gt; Developer Settings -&amp;gt; Personal Access Token -&amp;gt; Generate New Token&lt;/code&gt; )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wont cover how to create a Hugo web page as this is best explained in the &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; target=&#34;_blank&#34;&gt;quick start&lt;/a&gt;) of Hugo.&lt;/p&gt;

&lt;p&gt;After you are happy with the content of your blog in the repository of source code (*1), and want to start deploying you will need to add a &lt;code&gt;.travis.yml&lt;/code&gt; with the next content&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;sudo: true
dist: trusty

install:
  - sudo apt-get --yes install snapd
  - sudo snap install hugo

script:
  - /snap/bin/hugo 

deploy:
  provider: pages
  local-dir: public
  repo: &amp;lt;User or Organization&amp;gt;/&amp;lt;User or Organization&amp;gt;.github.com
  target-branch: master
  skip-cleanup: true
  github-token: $GITHUB_TOKEN
  committer-from-gh: true
  keep-history: true
  on:
    branch: master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you will have to change the repo content to match your destination repository (*2). The previous code what does is installs hugo in the deployment machine, builds your web page and deploys using the pages plugin. If you have a custom domain make sure to set the property &lt;code&gt;fqdn&lt;/code&gt; to your domain, if not you will overwrite this field in each commit.&lt;/p&gt;

&lt;p&gt;After adding the file you will have to go to Travis web page and toggle your code repository (*1) got to &lt;code&gt;More Options -&amp;gt; Settings -&amp;gt; Environment Variables&lt;/code&gt; and add &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; as the token retrieved from github.&lt;/p&gt;

&lt;p&gt;After this in any commit in the master branch of your web page you will get it deployed and go live.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web Threads</title>
      <link>http://kanekotic.github.io/project/web-threds/</link>
      <pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/web-threds/</guid>
      <description>

&lt;h1 id=&#34;logomakr-09u4zz-https-user-images-githubusercontent-com-3071208-44622482-88a91a80-a8b9-11e8-976c-fdd422ac5c98-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/44622482-88a91a80-a8b9-11e8-976c-fdd422ac5c98.png&#34; alt=&#34;logomakr_09u4zz&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kanekotic/web-threads&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kanekotic/web-threads.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/kanekotic/web-threads?branch=master&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/kanekotic/web-threads/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/kanekotic/web-threads&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/web-threads.svg&#34; alt=&#34;npm&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/kanekotic/web-threads/blob/master/LICENSE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kanekotic/web-threads.svg&#34; alt=&#34;GitHub license&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://GitHub.com/kanekotic/web-threads/graphs/commit-activity&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg&#34; alt=&#34;Maintenance&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://www.paypal.me/kanekotic/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-blue.svg&#34; alt=&#34;Donate&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;generic threads using web workers for the web&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;add it to your project using &lt;code&gt;npm install web-threads --save&lt;/code&gt; or &lt;code&gt;yarn add web-threads&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;simple-function-with-arguments&#34;&gt;Simple function with arguments&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { execute } from &#39;web-threads&#39;

let func = (value) =&amp;gt; {
    return value * value
}
let params = {
    fn: func.toString(),
    args: [2]
} 
execute(params)
    .then(console.log)
    .catch(console.error)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;function-with-context&#34;&gt;Function with context&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { execute } from &#39;web-threads&#39;

function Func(value){
    this.value = value
}
Func.prototype.foo = function(){
    return this.value * this.value
};
var instance = new Func(2)
let params = {
    fn: instance.foo,
    context: instance
} 
execute(params)
    .then(console.log)
    .catch(console.error)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;function-with-context-and-arguments&#34;&gt;Function with context and arguments&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { execute } from &#39;web-threads&#39;

function Func(value){
    this.value = value
}
Func.prototype.foo = function(otherValue){
    return this.value * otherValue
};
var instance = new Func(2)
let params = {
    fn: instance.foo,
    context: instance,
    args: [4]
} 
execute(params)
    .then(console.log)
    .catch(console.error)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;es6-class-call-function-with-arguments&#34;&gt;ES6 class call function with arguments&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { execute } from &#39;web-threads&#39;

class someClass {
    constructor(val){
        this.val = val
    }
    foo(some){
        return this.val * some
    }
}

var instance = new someClass(2)
let params = {
    fn: instance.foo,
    context: instance,
    args: [4]
} 
execute(params)
    .then(console.log)
    .catch(console.error)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;inspired-in&#34;&gt;Inspired in:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CodeInBrackets/ui.wind.js&#34; target=&#34;_blank&#34;&gt;work done pairing with @kmruiz for ui.wind.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.scottlogic.com/2011/02/24/web-workers-part-3-creating-a-generic-worker.html&#34; target=&#34;_blank&#34;&gt;scottlogic.com post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eslinstructor.net/vkthread/&#34; target=&#34;_blank&#34;&gt;@vkiryukhin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;web-graphic-by-a-href-http-www-flaticon-com-authors-picol-picol-a-from-a-href-http-www-flaticon-com-flaticon-a-is-licensed-under-a-href-http-creativecommons-org-licenses-by-3-0-title-creative-commons-by-3-0-cc-by-3-0-a-check-out-the-new-logo-that-i-created-on-a-href-http-logomakr-com-title-logo-makr-logomakr-com-a-https-logomakr-com-09u4zz&#34;&gt;Web graphic by &lt;a href=&#34;http://www.flaticon.com/authors/picol&#34;&gt;picol&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com/&#34;&gt;Flaticon&lt;/a&gt; is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34;&gt;CC BY 3.0&lt;/a&gt;. Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/09u4Zz&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/09u4Zz&lt;/a&gt;&lt;/h5&gt;
</description>
    </item>
    
    <item>
      <title>Flow Runtime Faker</title>
      <link>http://kanekotic.github.io/project/flow-runtime-faker/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/flow-runtime-faker/</guid>
      <description>

&lt;h1 id=&#34;logo-https-user-images-githubusercontent-com-3071208-48891796-a7796780-ee3c-11e8-93a0-69b06f1a1198-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/48891796-a7796780-ee3c-11e8-93a0-69b06f1a1198.png&#34; alt=&#34;logo&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kanekotic/flow-runtime-faker&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kanekotic/flow-runtime-faker.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/kanekotic/flow-runtime-faker?branch=master&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/kanekotic/flow-runtime-faker/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/kanekotic/flow-runtime-faker&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/flow-runtime-faker.svg&#34; alt=&#34;npm&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/kanekotic/flow-runtime-faker/blob/master/LICENSE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kanekotic/flow-runtime-faker.svg&#34; alt=&#34;GitHub license&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://GitHub.com/kanekotic/flow-runtime-faker/graphs/commit-activity&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg&#34; alt=&#34;Maintenance&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://www.paypal.me/kanekotic/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg&#34; alt=&#34;Donate&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Type definitions in javascript can help adding type safety for classes. But should not make more complicated property based testing. This package aims to generate random objects based on their flow definitions&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;yarn add flow-runtime-faker -D&lt;/code&gt; or &lt;code&gt;npm install flow-runtime-faker --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;if you use only &lt;code&gt;flow&lt;/code&gt; and not &lt;code&gt;flow-runtime&lt;/code&gt;. You can use this plugin by:
 - &lt;code&gt;yarn add flow-runtime babel-plugin-flow-runtime -D&lt;/code&gt; or &lt;code&gt;npm install flow-runtime babel-plugin-flow-runtime --save-dev&lt;/code&gt;
 - add the next configuration for tests phase on your &lt;code&gt;.babelrc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;    {
    ...
     &amp;quot;env&amp;quot;: {
        &amp;quot;test&amp;quot;: {
            &amp;quot;plugins&amp;quot;: [[&amp;quot;flow-runtime&amp;quot;, { &amp;quot;assert&amp;quot;: false, &amp;quot;annotate&amp;quot;: false }]]
        }
      }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import faker from &#39;flow-runtime-faker&#39;

type otherType {
    fuz: 42 | 7 | 32 | &amp;quot;Some&amp;quot; | &amp;quot;Some Other&amp;quot; | false
}

type myType = {
    foo: number,
    bar: number[],
    daz: string,
    don: otherType
}

let value = fake(test)

console.log(value)
/*
type myType = {
    foo: 10,
    bar: [1,6.40],
    daz: &amp;quot;something&amp;quot;,
    don: {
        fuz: 42
    }
}
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;support&#34;&gt;Support&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Done?&lt;/th&gt;
&lt;th&gt;Flow Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;numeric literals&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;string literals&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;boolean literals&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;union&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;maybe&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;arrays&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;subtypes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>tellojs</title>
      <link>http://kanekotic.github.io/project/tellojs/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/tellojs/</guid>
      <description>

&lt;h1 id=&#34;logomakr-123ujk-https-user-images-githubusercontent-com-3071208-49430616-cddbc300-f7ab-11e8-9356-381c730d0839-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/49430616-cddbc300-f7ab-11e8-9356-381c730d0839.png&#34; alt=&#34;logomakr_123ujk&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kanekotic/tellojs&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kanekotic/tellojs.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/kanekotic/tellojs?branch=master&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/kanekotic/tellojs/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/kanekotic/tellojs&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/tellojs.svg&#34; alt=&#34;npm&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/kanekotic/tellojs/blob/master/LICENSE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kanekotic/tellojs.svg&#34; alt=&#34;GitHub license&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://GitHub.com/kanekotic/tellojs/graphs/commit-activity&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg&#34; alt=&#34;Maintenance&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://www.paypal.me/kanekotic/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-blue.svg&#34; alt=&#34;Donate&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Provide an async promise based unofficial sdk for the tello drone based on the official &lt;a href=&#34;https://dl-cdn.ryzerobotics.com/downloads/tello/20180910/Tello%20SDK%20Documentation%20EN_1.3.pdf&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;add it to your project using &lt;code&gt;npm install tellojs --save&lt;/code&gt; or &lt;code&gt;yarn add tellojs&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;this sdk provide functions when you import for the next capabilities:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const sdk = require(&#39;tellojs&#39;)

const x = number,
    y = number,
    z = number,
    speed = number,
    start = {x, y, z},
    end = {x, y, z}

//CONTROL COMMANDS
await sdk.control.connect()                     // Enter SDK mode.
await sdk.control.takeoff()                     // Auto takeoff.
await sdk.control.land()                        // Auto landing.
await sdk.control.emergency()                   // Stop motors immediately
await sdk.control.stop()                        // Hovers in the air
await sdk.control.move.up(x)                    // Ascend to “x” cm.
await sdk.control.move.down(x)                  // Descend to “x” cm.
await sdk.control.move.left(x)                  // move left to “x” cm.
await sdk.control.move.right(x)                 // move right to “x” cm.
await sdk.control.move.front(x)                 // move forward to “x” cm.
await sdk.control.move.back(x)                  // move backwards to “x” cm.
await sdk.control.move.go(end, speed )          //  fly to x y z in speed (cm/s)
await sdk.control.move.curve(start, end, speed) //  fly to x y z in speed (cm/s)
await sdk.control.rotate.clockwise(x)           // rotate clockwise &#39;x&#39; degrees.
await sdk.control.rotate.counterClockwise(x)    // rotate counter clockwise &#39;x&#39; degrees.
await sdk.control.flip.left()                   // Flip to the left.
await sdk.control.flip.right()                  // Flip to the right.
await sdk.control.flip.back()                   // Flip in backward.
await sdk.control.flip.front()                  // Flip in forward.

//SET COMMANDS
await sdk.set.speed(x)                          // set speed to x cm/s
await sdk.set.rc(x, y, z, yaw)                  // Send RC control via four channels.
await sdk.set.wifi(ssid, password)              // Set Wi-Fi with SSID password

//READ COMMANDS
await sdk.read.speed()                          // Obtain current speed (cm/s).
await sdk.read.battery()                        // Obtain current battery percentage.
await sdk.read.time()                           // Obtain current flight time.
await sdk.read.height()                         // Obtain get height (cm)
await sdk.read.temperature()                    // Obtain temperature (°C)
await sdk.read.attitude()                       // Obtain IMU attitude data
await sdk.read.barometer()                      // Obtain barometer value (m)
await sdk.read.tof()                            // Obtain distance value from TOF（cm）
await sdk.read.acceleration()                   // Obtain IMU angular acceleration data (0.001g)
await sdk.read.wifi()                           // Obtain Wi-Fi SNR.
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;web-graphic-by-a-href-http-www-flaticon-com-authors-picol-picol-a-from-a-href-http-www-flaticon-com-flaticon-a-is-licensed-under-a-href-http-creativecommons-org-licenses-by-3-0-title-creative-commons-by-3-0-cc-by-3-0-a-check-out-the-new-logo-that-i-created-on-a-href-http-logomakr-com-title-logo-makr-logomakr-com-a-https-logomakr-com-09u4zz&#34;&gt;Web graphic by &lt;a href=&#34;http://www.flaticon.com/authors/picol&#34;&gt;picol&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com/&#34;&gt;Flaticon&lt;/a&gt; is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34;&gt;CC BY 3.0&lt;/a&gt;. Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/09u4Zz&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/09u4Zz&lt;/a&gt;&lt;/h5&gt;
</description>
    </item>
    
    <item>
      <title>Array Peek</title>
      <link>http://kanekotic.github.io/project/array-peek/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/array-peek/</guid>
      <description>

&lt;h1 id=&#34;logomakr-5sisss-https-user-images-githubusercontent-com-3071208-46520471-66bd9300-c87c-11e8-855c-e38b28094435-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/46520471-66bd9300-c87c-11e8-855c-e38b28094435.png&#34; alt=&#34;logomakr_5sisss&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kanekotic/array-peek&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kanekotic/array-peek.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/kanekotic/array-peek?branch=master&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/kanekotic/array-peek/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/kanekotic/array-peek&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dy/array-peek.svg&#34; alt=&#34;npm&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/kanekotic/array-peek/blob/master/LICENSE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kanekotic/array-peek.svg&#34; alt=&#34;GitHub license&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://GitHub.com/kanekotic/array-peek/graphs/commit-activity&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg&#34; alt=&#34;Maintenance&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://www.paypal.me/kanekotic/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg&#34; alt=&#34;Donate&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;extend array functionality to allow peek method.&lt;/p&gt;

&lt;h2 id=&#34;peek-vs-foreach&#34;&gt;peek vs forEach&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;peek&lt;/code&gt; as &lt;code&gt;forEach&lt;/code&gt; allows you to execute a callback on each of the elements of an array, not affecting the content of itself.&lt;/p&gt;

&lt;p&gt;The difference is that &lt;code&gt;forEach&lt;/code&gt; returns void so no further processing can be done, while &lt;code&gt;peek&lt;/code&gt; will return the array so you can continue the transformations necesary for your processing&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;add it to your project using &lt;code&gt;npm install array-peek --save&lt;/code&gt; or &lt;code&gt;yarn add array-peek&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;to use this package just add it before the usage of any array to extend its prototype. From then on you will have access to the peek function as seen in the next example.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(&#39;array-peek&#39;)

[1,2,3]
    .peek(console.log)
    .map((value) =&amp;gt; value * value)
    .peek(console.log)
    
//  Output:
//&amp;gt; 1
//&amp;gt; 2
//&amp;gt; 3
//&amp;gt; 1
//&amp;gt; 4
//&amp;gt; 9
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;created-my-free-logo-https-logomakr-com-5sisss-at-logomakr-com-logomakr-com&#34;&gt;Created my free &lt;a href=&#34;https://logomakr.com/5sISSS&#34; target=&#34;_blank&#34;&gt;logo&lt;/a&gt; at &lt;a href=&#34;LogoMakr.com&#34; target=&#34;_blank&#34;&gt;LogoMakr.com&lt;/a&gt;&lt;/h5&gt;
</description>
    </item>
    
    <item>
      <title>Express Exception Handler</title>
      <link>http://kanekotic.github.io/project/express-exception-handler/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/express-exception-handler/</guid>
      <description>

&lt;h1 id=&#34;logomakr-6nl700-https-user-images-githubusercontent-com-3071208-28988724-97dc463a-7971-11e7-9cec-ffc06bcc9205-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/28988724-97dc463a-7971-11e7-9cec-ffc06bcc9205.png&#34; alt=&#34;logomakr_6nl700&#34; /&gt;&lt;/h1&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;This package was created to add a general way to handle exception for express application with the expectation to make it simpler to handle all possible requests.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;add it to your project with &lt;code&gt;npm install express-exception-handler&lt;/code&gt; or &lt;code&gt;yarn add express-exception-handler&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;use&#34;&gt;Use&lt;/h2&gt;

&lt;p&gt;there are 2 diferent ways to integrate the main functionality of this package, either by adding the handle that gets injected to the router framework&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var exceptionHandler = require(&#39;express-exception-handler&#39;)
exceptionHandler.handle()
const app = require(&#39;express&#39;)()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or by wraping manually the routes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var wrap = require(&#39;express-exception-handler&#39;).wrap
router.post(&#39;/&#39;, wrap(async (req, res) =&amp;gt; {
    ...
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it also integrates an extended class from Error that contains a &lt;code&gt;message&lt;/code&gt; and a &lt;code&gt;status&lt;/code&gt; that can be used to pass diferent information to the error handle&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var httpError = require(&#39;express-exception-handler&#39;).exception
router.post(&#39;/&#39;, async (req, res) =&amp;gt; {
    throw new HttpError(&#39;Great Message&#39;, 400, &amp;quot;{Response: awesome}&amp;quot;)
}))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;last but not least it also contains a middleware that can be added directly to express that handles the previous named errors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var middleware = require(&#39;express-exception-handler&#39;).middleware
const app = require(&#39;express&#39;)()
app.use(middleware)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;p&gt;Arrows graphic by &lt;a href=&#34;http://www.flaticon.com/authors/madebyoliver&#34;&gt;madebyoliver&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com/&#34;&gt;Flaticon&lt;/a&gt; is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34;&gt;CC BY 3.0&lt;/a&gt;. Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Maker&#34;&gt;LogoMaker.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/6nL7006nL700&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/6nL7006nL700&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gatoo</title>
      <link>http://kanekotic.github.io/project/gatoo/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/gatoo/</guid>
      <description>

&lt;h1 id=&#34;logomakr-32f2md-https-user-images-githubusercontent-com-3071208-42147664-29898cca-7dcf-11e8-9c50-2cf3845b7fe8-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/42147664-29898cca-7dcf-11e8-9c50-2cf3845b7fe8.png&#34; alt=&#34;logomakr_32f2md&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kanekotic/gatoo&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kanekotic/gatoo.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/kanekotic/gatoo?branch=master&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/kanekotic/gatoo/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This project will provide a command line and a library to export google analytics to your prefered endpoint (console, log management, or db).&lt;/p&gt;

&lt;h2 id=&#34;use-as-command-line&#34;&gt;Use as Command Line&lt;/h2&gt;

&lt;p&gt;install globally with &lt;code&gt;npm install gatoo -g&lt;/code&gt;. Aftyer this it can be run with the next command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;gatoo console &amp;lt;email&amp;gt; &amp;lt;ReplativePath&amp;gt; &amp;lt;viewId&amp;gt; &amp;lt;startDate&amp;gt; &amp;lt;endDate&amp;gt; &amp;lt;metrics&amp;gt; &amp;lt;dimensions&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-as-library&#34;&gt;Use as library&lt;/h2&gt;

&lt;p&gt;first step is to add this to your project throught &lt;code&gt;yarn add gatoo&lt;/code&gt; or &lt;code&gt;npm install gatoo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;currently you can retrieve in a simple way data from google analytics and route it to your prefered output. An example of retrieval is the next one.&lt;/p&gt;

&lt;h3 id=&#34;import&#34;&gt;Import&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const importer = require(&#39;../lib/index&#39;).importer
    path = require(&#39;path&#39;)
    
const email = &#39;your email&#39; //email account from the user credentials
    keyPath = path.join(__dirname, &#39;your credentials&#39;)// path to credentials json or pem
    config = {
    viewId: &amp;quot;some viewId&amp;quot;,//the view id to query
    daterange:{
        &amp;quot;endDate&amp;quot;:&amp;quot;2017-06-30&amp;quot;,
        &amp;quot;startDate&amp;quot;:&amp;quot;2016-06-30&amp;quot;
      },
      metrics: &amp;quot;ga:users&amp;quot;,
      dimensions: &amp;quot;ga:date&amp;quot;
    }

const example = async () =&amp;gt; {
    const result = await importer(email, keyPath, config)
    console.log(JSON.stringify(result.data))
}

example()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export&#34;&gt;Export&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const exporter = require(&#39;../lib/index&#39;).exporter
    path = require(&#39;path&#39;)
    
const email = &#39;your email&#39; //email account from the user credentials
    keyPath = path.join(__dirname, &#39;your credentials&#39;)// path to credentials json or pem
    config = {
    viewId: &amp;quot;some viewId&amp;quot;,//the view id to query
    daterange:{
        &amp;quot;endDate&amp;quot;:&amp;quot;2017-06-30&amp;quot;,
        &amp;quot;startDate&amp;quot;:&amp;quot;2016-06-30&amp;quot;
      },
      metrics: &amp;quot;ga:users&amp;quot;,
      dimensions: &amp;quot;ga:date&amp;quot;
    }

const doSomething () =&amp;gt; {}

const example = async () =&amp;gt; {
    const result = await exporter(email, keyPath, config,  doSomething)
}

example()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export-to-console&#34;&gt;Export to console&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const exporter = require(&#39;../lib/index&#39;).outputTo
    path = require(&#39;path&#39;)
    
const email = &#39;your email&#39; //email account from the user credentials
    keyPath = path.join(__dirname, &#39;your credentials&#39;)// path to credentials json or pem
    config = {
    viewId: &amp;quot;some viewId&amp;quot;,//the view id to query
    daterange:{
        &amp;quot;endDate&amp;quot;:&amp;quot;2017-06-30&amp;quot;,
        &amp;quot;startDate&amp;quot;:&amp;quot;2016-06-30&amp;quot;
      },
      metrics: &amp;quot;ga:users&amp;quot;,
      dimensions: &amp;quot;ga:date&amp;quot;
    }

const example = async () =&amp;gt; {
    const result = await outputTo.console(email, keyPath, config)
}

example()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Retrieve data from google analytics&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Create library&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Create adapter for output console&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Create command line tool console&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create adapter logstash&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create adapter fluentd&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create adapter ES&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create command line tool logstash&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create command line tool fluentd&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create command line tool ES&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;p&gt;Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/32f2Md&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/32f2Md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ELK Docker</title>
      <link>http://kanekotic.github.io/project/elk-docker/</link>
      <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/elk-docker/</guid>
      <description>

&lt;h1 id=&#34;logomakr-5axvtc-https-user-images-githubusercontent-com-3071208-41837679-81e03624-785e-11e8-841c-4bd25a61b5cd-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/41837679-81e03624-785e-11e8-841c-4bd25a61b5cd.png&#34; alt=&#34;logomakr_5axvtc&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;This show how multiple containers can aggregate log to logging infrastructure with docker compose using logstash, elastic search and kibana&lt;/p&gt;

&lt;h2 id=&#34;run&#34;&gt;Run&lt;/h2&gt;

&lt;p&gt;you will need docker installed in your computer, after it :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;run to get some logs from httpd&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;repeat 10 curl http://localhost:80/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Kibana:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this might take a bit&lt;/li&gt;
&lt;li&gt;Navigate to &lt;a href=&#34;http://localhost:5601&#34; target=&#34;_blank&#34;&gt;http://localhost:5601&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add logstash-* as index with @timestamp as Time-field name&lt;/li&gt;
&lt;li&gt;Go to Discover&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Grafana:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to &lt;a href=&#34;http://localhost:3000&#34; target=&#34;_blank&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;username and password are admin&lt;/li&gt;
&lt;li&gt;Navigate and create dashboards&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;architecture&#34;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;the target architecture would be to allow gathering information from applications but also sync with hadoop to enable having a data lake to improve analytics, and pull directly from google analytics to logstash.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/41893258-66e86d6a-791b-11e8-9e2a-929c723b9f44.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(current architecture is missing google analytics and hadoop as seen in TODO list)&lt;/p&gt;

&lt;h2 id=&#34;backlog&#34;&gt;Backlog&lt;/h2&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add kibana container&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add Grafana container visualization&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add elasticsearch container&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add logstash container and configuration&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add aplication containers&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add dashboard as code for grafana&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Add import fron google analytics through logstash and http_poller&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Add hadoop infrastructure for data analytics extension&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;references-further-readings&#34;&gt;References &amp;amp; further readings&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.fluentd.org/v0.12/articles/docker-logging-efk-compose&#34; target=&#34;_blank&#34;&gt;docker logging article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/eunomie/e7a183602b8734c47058d277700fdc2d&#34; target=&#34;_blank&#34;&gt;gist eunomie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/plugins-inputs-http_poller.html&#34; target=&#34;_blank&#34;&gt;http poller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/products/hadoop&#34; target=&#34;_blank&#34;&gt;hadoop elastic search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.treasuredata.com/blog/2015/08/31/hadoop-vs-elasticsearch-for-advanced-analytics/&#34; target=&#34;_blank&#34;&gt;hadoop vs elastic search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;p&gt;Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/5axvTc&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/5axvTc&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Travis YML Plugin</title>
      <link>http://kanekotic.github.io/project/travis-yml-plugin/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:01 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/travis-yml-plugin/</guid>
      <description>

&lt;h1 id=&#34;logomakr-5059hu-https-cloud-githubusercontent-com-assets-3071208-20248819-1e3637aa-a9ec-11e6-89b7-6c9c403af3c7-png&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3071208/20248819/1e3637aa-a9ec-11e6-89b7-6c9c403af3c7.png&#34; alt=&#34;logomakr_5059hu&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;This plugin has been done to be able to have certain level of compatibility in between Jenkins, Travis-CI and other YML based build services.&lt;/p&gt;

&lt;h2 id=&#34;use&#34;&gt;Use&lt;/h2&gt;

&lt;p&gt;Install by navigating and selecting &lt;code&gt;Manage Jenkins&lt;/code&gt; -&amp;gt; &lt;code&gt;Manage Plugins&lt;/code&gt; -&amp;gt; &lt;code&gt;Travis YML Plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add to your workspace on the root folder a .travis.yml, this plugin accept the next phases of lifecycle:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;before_install&lt;/li&gt;
&lt;li&gt;install&lt;/li&gt;
&lt;li&gt;before_script&lt;/li&gt;
&lt;li&gt;script&lt;/li&gt;
&lt;li&gt;after_success&lt;/li&gt;
&lt;li&gt;after_failure&lt;/li&gt;
&lt;li&gt;before_deploy&lt;/li&gt;
&lt;li&gt;deploy&lt;/li&gt;
&lt;li&gt;after_deploy&lt;/li&gt;
&lt;li&gt;after_script&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any failure on your build and want to review the final generated, you should declare the environment variable &lt;code&gt;DEBUG_TRAVIS_YML&lt;/code&gt; either on your build node or in jenkins.&lt;/p&gt;

&lt;h2 id=&#34;development&#34;&gt;Development&lt;/h2&gt;

&lt;p&gt;If you want to help on the development of this plugin you will need &lt;code&gt;Jruby&lt;/code&gt; and the next prerequisites:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For development and to see this plugin in a test Jenkins server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle install
$ jpi server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;after that open a pull request to add your changes.&lt;/p&gt;

&lt;p&gt;If you have any further request open an issue on the main repository or contact the sustainers:
- @kanekotic
- @masaki&lt;/p&gt;

&lt;h2 id=&#34;logo&#34;&gt;Logo&lt;/h2&gt;

&lt;p&gt;People graphic by &lt;a href=&#34;http://www.flaticon.com/authors/freepik&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com/&#34;&gt;Flaticon&lt;/a&gt; is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34;&gt;CC BY 3.0&lt;/a&gt;. Made with &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Maker&#34;&gt;Logo Maker&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PlayYoutube Atom</title>
      <link>http://kanekotic.github.io/project/playoutube-atom/</link>
      <pubDate>Thu, 29 Jun 2017 01:01:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/playoutube-atom/</guid>
      <description>

&lt;h1 id=&#34;logomakr-0iwknv-https-user-images-githubusercontent-com-3071208-42363375-bcf912a2-80f7-11e8-999b-82e107a3d1af-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/42363375-bcf912a2-80f7-11e8-999b-82e107a3d1af.png&#34; alt=&#34;logomakr_0iwknv&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;Search and play youtube videos inside atom. Follow your favorite tutorials inside the development environment in a floating window&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3071208/11987290/d6f8e8c0-a9dc-11e5-8d1e-c0ee5a2922e1.gif&#34; alt=&#34;playyoutube-atom&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;use&#34;&gt;Use&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;playyoutube-atom:search&amp;rsquo; (&amp;lsquo;ctrl-shift-y&amp;rsquo;): Display the search window:

&lt;ul&gt;
&lt;li&gt;input some search terms and hit enter.&lt;/li&gt;
&lt;li&gt;Navigate the results:&lt;/li&gt;
&lt;li&gt;Using the mouse.&lt;/li&gt;
&lt;li&gt;Using up and down key.&lt;/li&gt;
&lt;li&gt;Play video:&lt;/li&gt;
&lt;li&gt;Click.&lt;/li&gt;
&lt;li&gt;Using side key.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&amp;lsquo;playyoutube-atom:hide&amp;rsquo; (&amp;lsquo;ctrl-shift-h&amp;rsquo;): Hides the player&lt;/li&gt;
&lt;li&gt;&amp;lsquo;playyoutube-atom:show&amp;rsquo; (&amp;lsquo;ctrl-shift-j&amp;rsquo;): Shows the player&lt;/li&gt;
&lt;li&gt;&amp;lsquo;playyoutube-atom:close&amp;rsquo; (&amp;lsquo;ctrl-shift-c&amp;rsquo;): Clear current search and video content&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;authors-and-contributors&#34;&gt;Authors and Contributors&lt;/h3&gt;

&lt;p&gt;@kanekotic&lt;/p&gt;

&lt;h3 id=&#34;support-or-contact&#34;&gt;Support or Contact&lt;/h3&gt;

&lt;p&gt;Having trouble with &amp;lsquo;playyoutube&amp;rsquo;? Any idea of how to improve it?
Review our &lt;a href=&#34;https://github.com/Hatisoft/PlayYouTube/wiki&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt; or &lt;a href=&#34;https://github.com/Hatisoft/PlayYouTube/issues&#34; target=&#34;_blank&#34;&gt;add issue/recomendation&lt;/a&gt; and we will sort it out.&lt;/p&gt;

&lt;p&gt;###Todo:
- [ ] make video frame draggable&lt;/p&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;p&gt;Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/0IWkNv&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/0IWkNv&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PlayYoutube Visual Studio</title>
      <link>http://kanekotic.github.io/project/playoutube-vs/</link>
      <pubDate>Thu, 29 Jun 2017 01:00:10 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/playoutube-vs/</guid>
      <description>

&lt;h1 id=&#34;playyoutubeheader-https-user-images-githubusercontent-com-3071208-42363002-129d9374-80f6-11e8-9ccf-1bd222f07884-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/42363002-129d9374-80f6-11e8-9ccf-1bd222f07884.png&#34; alt=&#34;playyoutubeheader&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gitter.im/Hatisoft/PlayYouTube?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg&#34; alt=&#34;Join the chat at https://gitter.im/Hatisoft/PlayYouTube&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plugin for Visual studio that allows you to search and play youtube videos inside your development enviroment.&lt;/p&gt;

&lt;p&gt;follow tutorials or listen what you want, without the pain of having to toggle between multiple windows.&lt;/p&gt;

&lt;h3 id=&#34;use&#34;&gt;Use&lt;/h3&gt;

&lt;p&gt;put your query on the search combo box and hit enter. You will be provided with a list of results, the selected results will be displayed and be streamed&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3071208/8636943/f13e5d16-287a-11e5-960b-21bdd390f5a2.png&#34; alt=&#34;playyoutubecapture&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;authors-and-contributors&#34;&gt;Authors and Contributors&lt;/h3&gt;

&lt;p&gt;@kanekotic&lt;/p&gt;

&lt;h3 id=&#34;support-or-contact&#34;&gt;Support or Contact&lt;/h3&gt;

&lt;p&gt;Having trouble with &amp;lsquo;PlayYouTube&amp;rsquo;? Any idea of how to improve it?
Review our &lt;a href=&#34;https://github.com/Hatisoft/PlayYouTube/wiki&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt; or &lt;a href=&#34;https://github.com/Hatisoft/PlayYouTube/issues&#34; target=&#34;_blank&#34;&gt;add issue/recomendation&lt;/a&gt; and we’ll sort it out.&lt;/p&gt;

&lt;p&gt;###Build State
CI: &lt;a href=&#34;https://ci.appveyor.com/project/kanekotic/playyoutube-877b8&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/mm7u1f8dm2vn5l27?svg=true&#34; alt=&#34;Build status&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Release: &lt;a href=&#34;https://ci.appveyor.com/project/kanekotic/playyoutube&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/qgykpbj3ifyfu0i7?svg=true&#34; alt=&#34;Build status&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search Error On</title>
      <link>http://kanekotic.github.io/project/search-error-on/</link>
      <pubDate>Thu, 29 Jun 2017 01:00:10 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/search-error-on/</guid>
      <description>

&lt;h1 id=&#34;searchonheader-https-user-images-githubusercontent-com-3071208-42362398-5bb7dee6-80f3-11e8-9ecc-56dcc2bdda97-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/42362398-5bb7dee6-80f3-11e8-9ecc-56dcc2bdda97.png&#34; alt=&#34;searchonheader&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gitter.im/Hatisoft/SearchErrorOn?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg&#34; alt=&#34;Join the chat at https://gitter.im/Hatisoft/SearchErrorOn&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This plugin for visual studio has been created to be able to find the errors generated during compilation time on your favourite web browser.&lt;/p&gt;

&lt;h3 id=&#34;use&#34;&gt;Use&lt;/h3&gt;

&lt;p&gt;Select one or more errors in your Error List Window. Right click and hit &amp;lsquo;Search Error On&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3071208/8430164/f75af2c2-1f2e-11e5-99c5-ae979995bd3b.png&#34; alt=&#34;search on&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;configure&#34;&gt;Configure&lt;/h3&gt;

&lt;p&gt;Under &amp;lsquo;Tools -&amp;gt; Options-&amp;gt; Search Error On&amp;rsquo; you will be able to select one of your favourite search engines.
&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3071208/8430166/f9b19ff8-1f2e-11e5-91b4-9c7a8aae0e21.png&#34; alt=&#34;search on configuration&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;authors-and-contributors&#34;&gt;Authors and Contributors&lt;/h3&gt;

&lt;p&gt;@kanekotic&lt;/p&gt;

&lt;h3 id=&#34;support-or-contact&#34;&gt;Support or Contact&lt;/h3&gt;

&lt;p&gt;Having trouble with &amp;lsquo;Search Error On&amp;hellip;&amp;rsquo;? Any idea of how to improve it?
Review our &lt;a href=&#34;https://github.com/Hatisoft/SearchErrorOn/wiki&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt; or &lt;a href=&#34;https://github.com/Hatisoft/SearchErrorOn/issues&#34; target=&#34;_blank&#34;&gt;add issue/recomendation&lt;/a&gt; and we’ll sort it out.&lt;/p&gt;

&lt;p&gt;###Build State
CI: &lt;a href=&#34;https://ci.appveyor.com/project/kanekotic/searcherroron&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/3dfrnphpa1l4tlyr?svg=true&#34; alt=&#34;Build status&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Release: &lt;a href=&#34;https://ci.appveyor.com/project/kanekotic/searcherroron-5ibi9&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/1b25khghlfjq9cho?svg=true&#34; alt=&#34;Build status&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raw Guid Converter</title>
      <link>http://kanekotic.github.io/project/raw-guid-converter/</link>
      <pubDate>Thu, 29 Jun 2017 01:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/raw-guid-converter/</guid>
      <description>

&lt;h1 id=&#34;logomakr-5c2oee-https-user-images-githubusercontent-com-3071208-41022709-abb95bd6-696a-11e8-8564-3ad7d43d44fb-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/41022709-abb95bd6-696a-11e8-8564-3ad7d43d44fb.png&#34; alt=&#34;logomakr_5c2oee&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kanekotic/raw-guid-converter&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kanekotic/raw-guid-converter.svg?branch=v0.0.2&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/kanekotic/raw-guid-converter?branch=master&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/kanekotic/raw-guid-converter/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/Naereen/StrapDown.js/blob/master/LICENSE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Naereen/StrapDown.js.svg&#34; alt=&#34;GitHub license&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://GitHub.com/Naereen/StrapDown.js/graphs/commit-activity&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg&#34; alt=&#34;Maintenance&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-case&#34;&gt;Use Case&lt;/h2&gt;

&lt;p&gt;command line and library to convert guids from oracle raw format to formated guid and viceversa&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;if you want ot use in a package &lt;code&gt;yarn add raw-guid-converter&lt;/code&gt; or &lt;code&gt;npm i raw-guid-converter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;if you want to use it as a command install globally with &lt;code&gt;npm i raw-guid-converter -g&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;raw-to-guid-string&#34;&gt;Raw to Guid String&lt;/h3&gt;

&lt;h4 id=&#34;code&#34;&gt;Code&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const convert = require(&#39;raw-guid-converter&#39;).convertRaw
let guid = convert(&#39;4630880E6D0B3640AB446C6FB3C44FE3&#39;)
//guid =&amp;gt; 0e883046-0b6d-4036-ab44-6c6fb3c44fe3
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;command-line&#34;&gt;Command line&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;convert-guid fromRaw 4630880E6D0B3640AB446C6FB3C44FE3
#0e883046-0b6d-4036-ab44-6c6fb3c44fe3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can pass multiple guids to convert all of them in one go&lt;/p&gt;

&lt;h3 id=&#34;guid-string-to-raw&#34;&gt;Guid string to Raw&lt;/h3&gt;

&lt;h4 id=&#34;code-1&#34;&gt;Code&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const convert = require(&#39;raw-guid-converter&#39;).convertString
let guid = convert(&#39;0e883046-0b6d-4036-ab44-6c6fb3c44fe3&#39;)
//guid =&amp;gt; &#39;4630880E6D0B3640AB446C6FB3C44FE3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;command-line-1&#34;&gt;Command line&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;convert-guid fromString 0e883046-0b6d-4036-ab44-6c6fb3c44fe3
#&#39;4630880E6D0B3640AB446C6FB3C44FE3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can pass multiple guids to convert all of them in one go&lt;/p&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/5c2oEE&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/5c2oEE&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Any Prebuilt</title>
      <link>http://kanekotic.github.io/project/any-prebuild/</link>
      <pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/any-prebuild/</guid>
      <description>

&lt;h1 id=&#34;logomakr-3dkn9b-https-cloud-githubusercontent-com-assets-3071208-22477192-c7ce1d86-e7aa-11e6-87de-c24336e1ea3e-png&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3071208/22477192/c7ce1d86-e7aa-11e6-87de-c24336e1ea3e.png&#34; alt=&#34;logomakr_3dkn9b&#34; /&gt;&lt;/h1&gt;

&lt;h1 id=&#34;mission&#34;&gt;Mission&lt;/h1&gt;

&lt;p&gt;Easy generation or integration of prebuilt packages. It helps fetchs prebuilt binaries from github releases.&lt;/p&gt;

&lt;h1 id=&#34;generate-a-prebuilt-package&#34;&gt;Generate a prebuilt package&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create new project&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Add this package as dependency&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;npm install any-prebuilt --save
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create &lt;code&gt;postinstall.js&lt;/code&gt; file with content:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;require(&#39;any-prebuilt&#39;).install(require(&#39;./package.json&#39;).prebuilt)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create &lt;code&gt;index.js&lt;/code&gt; file with content:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var anyPrebuilt = require(&#39;any-prebuilt&#39;)
anyPrebuilt.initialize(__dirname, require(&#39;./package.json&#39;).prebuilt)
module.exports.path = anyPrebuilt.path
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;On the &lt;code&gt;package.json&lt;/code&gt; add a prebuilt element (you can also add this to any other file that provides a jason object to both index and postinstall.js).&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;prebuilt&amp;quot;: {
    &amp;quot;arch&amp;quot;: &amp;lt;string&amp;gt;, // Target architecture (supported: `ia32` / `x64`. Default value: machine&#39;s architecture)
    &amp;quot;platform&amp;quot;: &amp;lt;string&amp;gt;, //Target platform (supported: `win` / `osx` / `linux`. Default value: machine&#39;s platform)
    &amp;quot;version&amp;quot;: &amp;lt;string&amp;gt;, //Target version (format: `vX.Y.Z`. Default value: latest)
    &amp;quot;targetDir&amp;quot;: &amp;lt;string&amp;gt;, //Target directory (where to install the binaries. Default value: `./bin`)
    &amp;quot;targetBin&amp;quot;: &amp;lt;string&amp;gt;, //Target binary (the precompiled binary to be required in node. No default value)
    &amp;quot;version&amp;quot;: &amp;lt;string&amp;gt;, //Target version (format: `vX.Y.Z`. Default value: latest)
    &amp;quot;user&amp;quot;: &amp;lt;string&amp;gt;, // user or Organization (format: string. Is `required`)
    &amp;quot;repo&amp;quot;: &amp;lt;string&amp;gt;, //Origin repo (format: string. Is `required`)
    &amp;quot;token&amp;quot;: &amp;lt;string&amp;gt; //Github token (format: string. `required` if private repo)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;In your &lt;code&gt;package .json&lt;/code&gt; add the next script:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
    &amp;quot;postinstall&amp;quot;: &amp;quot;node postinstall.js&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As seen before this can be configured using a json object but also can be configured or overrided using the next enviroment variables &lt;code&gt;PREBUILT_ARCH&lt;/code&gt;, &lt;code&gt;PREBUILT_PLATFORM&lt;/code&gt;, &lt;code&gt;PREBUILT_VERSION&lt;/code&gt;, &lt;code&gt;PREBUILT_BINARY&lt;/code&gt;, &lt;code&gt;PREBUILT_TOKEN&lt;/code&gt;, &lt;code&gt;PREBUILT_REPO&lt;/code&gt;, &lt;code&gt;PREBUILT_USER&lt;/code&gt; and &lt;code&gt;PREBUILT_TARGET_DIR&lt;/code&gt; environment variables.&lt;/p&gt;

&lt;h3 id=&#34;special-thanks&#34;&gt;Special thanks&lt;/h3&gt;

&lt;p&gt;to all the contributors to &lt;a href=&#34;https://github.com/Ivshti/wcjs-prebuilt&#34; target=&#34;_blank&#34;&gt;wcjs-prebuilt&lt;/a&gt; that this package is based on.&lt;/p&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;p&gt;Hours graphic by &lt;a href=&#34;http://www.flaticon.com/authors/freepik&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com/&#34;&gt;Flaticon&lt;/a&gt; is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34;&gt;CC BY 3.0&lt;/a&gt;. Made with &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Maker&#34;&gt;Logo Maker&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
