<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kanekotic on Kanekotic</title>
    <link>http://kanekotic.github.io/</link>
    <description>Recent content in Kanekotic on Kanekotic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ELK Docker</title>
      <link>http://kanekotic.github.io/project/elk-docker/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/elk-docker/</guid>
      <description>

&lt;h1 id=&#34;logomakr-5axvtc-https-user-images-githubusercontent-com-3071208-41837679-81e03624-785e-11e8-841c-4bd25a61b5cd-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/41837679-81e03624-785e-11e8-841c-4bd25a61b5cd.png&#34; alt=&#34;logomakr_5axvtc&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;This show how multiple containers can aggregate log to logging infrastructure with docker compose using logstash, elastic search and kibana&lt;/p&gt;

&lt;h2 id=&#34;run&#34;&gt;Run&lt;/h2&gt;

&lt;p&gt;you will need docker installed in your computer, after it :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;run to get some logs from httpd&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;repeat 10 curl http://localhost:80/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Kibana:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this might take a bit&lt;/li&gt;
&lt;li&gt;Navigate to &lt;a href=&#34;http://localhost:5601&#34; target=&#34;_blank&#34;&gt;http://localhost:5601&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add logstash-* as index with @timestamp as Time-field name&lt;/li&gt;
&lt;li&gt;Go to Discover&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Grafana:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to &lt;a href=&#34;http://localhost:3000&#34; target=&#34;_blank&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;username and password are admin&lt;/li&gt;
&lt;li&gt;Navigate and create dashboards&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;architecture&#34;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;the target architecture would be to allow gathering information from applications but also sync with hadoop to enable having a data lake to improve analytics, and pull directly from google analytics to logstash.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/41893258-66e86d6a-791b-11e8-9e2a-929c723b9f44.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;(current architecture is missing google analytics and hadoop as seen in TODO list)&lt;/p&gt;

&lt;h2 id=&#34;backlog&#34;&gt;Backlog&lt;/h2&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add kibana container&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add Grafana container visualization&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add elasticsearch container&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add logstash container and configuration&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add aplication containers&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Add dashboard as code for grafana&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Add import fron google analytics through logstash and http_poller&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Add hadoop infrastructure for data analytics extension&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;references-further-readings&#34;&gt;References &amp;amp; further readings&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.fluentd.org/v0.12/articles/docker-logging-efk-compose&#34; target=&#34;_blank&#34;&gt;docker logging article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/eunomie/e7a183602b8734c47058d277700fdc2d&#34; target=&#34;_blank&#34;&gt;gist eunomie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/logstash/current/plugins-inputs-http_poller.html&#34; target=&#34;_blank&#34;&gt;http poller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/products/hadoop&#34; target=&#34;_blank&#34;&gt;hadoop elastic search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.treasuredata.com/blog/2015/08/31/hadoop-vs-elasticsearch-for-advanced-analytics/&#34; target=&#34;_blank&#34;&gt;hadoop vs elastic search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;p&gt;Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/5axvTc&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/5axvTc&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gatoo</title>
      <link>http://kanekotic.github.io/project/gatoo/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/gatoo/</guid>
      <description>

&lt;h1 id=&#34;logomakr-32f2md-https-user-images-githubusercontent-com-3071208-42147664-29898cca-7dcf-11e8-9c50-2cf3845b7fe8-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/42147664-29898cca-7dcf-11e8-9c50-2cf3845b7fe8.png&#34; alt=&#34;logomakr_32f2md&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kanekotic/gatoo&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kanekotic/gatoo.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/kanekotic/gatoo?branch=master&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/kanekotic/gatoo/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This project will provide a command line and a library to export google analytics to your prefered endpoint (console, log management, or db).&lt;/p&gt;

&lt;h2 id=&#34;use-as-command-line&#34;&gt;Use as Command Line&lt;/h2&gt;

&lt;p&gt;install globally with &lt;code&gt;npm install gatoo -g&lt;/code&gt;. Aftyer this it can be run with the next command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;gatoo console &amp;lt;email&amp;gt; &amp;lt;ReplativePath&amp;gt; &amp;lt;viewId&amp;gt; &amp;lt;startDate&amp;gt; &amp;lt;endDate&amp;gt; &amp;lt;metrics&amp;gt; &amp;lt;dimensions&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use-as-library&#34;&gt;Use as library&lt;/h2&gt;

&lt;p&gt;first step is to add this to your project throught &lt;code&gt;yarn add gatoo&lt;/code&gt; or &lt;code&gt;npm install gatoo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;currently you can retrieve in a simple way data from google analytics and route it to your prefered output. An example of retrieval is the next one.&lt;/p&gt;

&lt;h3 id=&#34;import&#34;&gt;Import&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const importer = require(&#39;../lib/index&#39;).importer
    path = require(&#39;path&#39;)
    
const email = &#39;your email&#39; //email account from the user credentials
    keyPath = path.join(__dirname, &#39;your credentials&#39;)// path to credentials json or pem
    config = {
    viewId: &amp;quot;some viewId&amp;quot;,//the view id to query
    daterange:{
        &amp;quot;endDate&amp;quot;:&amp;quot;2017-06-30&amp;quot;,
        &amp;quot;startDate&amp;quot;:&amp;quot;2016-06-30&amp;quot;
      },
      metrics: &amp;quot;ga:users&amp;quot;,
      dimensions: &amp;quot;ga:date&amp;quot;
    }

const example = async () =&amp;gt; {
    const result = await importer(email, keyPath, config)
    console.log(JSON.stringify(result.data))
}

example()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export&#34;&gt;Export&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const exporter = require(&#39;../lib/index&#39;).exporter
    path = require(&#39;path&#39;)
    
const email = &#39;your email&#39; //email account from the user credentials
    keyPath = path.join(__dirname, &#39;your credentials&#39;)// path to credentials json or pem
    config = {
    viewId: &amp;quot;some viewId&amp;quot;,//the view id to query
    daterange:{
        &amp;quot;endDate&amp;quot;:&amp;quot;2017-06-30&amp;quot;,
        &amp;quot;startDate&amp;quot;:&amp;quot;2016-06-30&amp;quot;
      },
      metrics: &amp;quot;ga:users&amp;quot;,
      dimensions: &amp;quot;ga:date&amp;quot;
    }

const doSomething () =&amp;gt; {}

const example = async () =&amp;gt; {
    const result = await exporter(email, keyPath, config,  doSomething)
}

example()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;export-to-console&#34;&gt;Export to console&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const exporter = require(&#39;../lib/index&#39;).outputTo
    path = require(&#39;path&#39;)
    
const email = &#39;your email&#39; //email account from the user credentials
    keyPath = path.join(__dirname, &#39;your credentials&#39;)// path to credentials json or pem
    config = {
    viewId: &amp;quot;some viewId&amp;quot;,//the view id to query
    daterange:{
        &amp;quot;endDate&amp;quot;:&amp;quot;2017-06-30&amp;quot;,
        &amp;quot;startDate&amp;quot;:&amp;quot;2016-06-30&amp;quot;
      },
      metrics: &amp;quot;ga:users&amp;quot;,
      dimensions: &amp;quot;ga:date&amp;quot;
    }

const example = async () =&amp;gt; {
    const result = await outputTo.console(email, keyPath, config)
}

example()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Retrieve data from google analytics&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Create library&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Create adapter for output console&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Create command line tool console&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create adapter logstash&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create adapter fluentd&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create adapter ES&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create command line tool logstash&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create command line tool fluentd&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Create command line tool ES&lt;br /&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;p&gt;Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/32f2Md&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/32f2Md&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OAuth Electron Twitter</title>
      <link>http://kanekotic.github.io/project/oauth-electron-twitter/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/oauth-electron-twitter/</guid>
      <description>

&lt;h1 id=&#34;logo-https-cloud-githubusercontent-com-assets-3071208-14719944-55c32866-07ff-11e6-9821-1a564a0cf065-png&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3071208/14719944/55c32866-07ff-11e6-9821-1a564a0cf065.png&#34; alt=&#34;logo&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;Use Twitter OAuth in a simple way inside your electron App.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;add it to your elenctron project using npm command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install oauth-electron-twitter --save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;add the require for ouath and twitter specific code from this package&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var oauth = require(&#39;oauth-electron-twitter&#39;).oauth;
var twitter = require(&#39;oauth-electron-twitter&#39;).twitter;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;declare a twitter object, and use it as parameter for the oauth in conjuntion with the electron window used to display the login. the login method return a promise with the result or the errror provided by the login pase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var window = new BrowserWindow({webPreferences: {nodeIntegration: false}});
var info = new twitter(&amp;quot;key&amp;quot;,&amp;quot;secret&amp;quot;);
var auth = new oauth();
auth.login(info, window).then((result) =&amp;gt; {
               console.log(result);
          }).catch((error) =&amp;gt; {
               console.log(error);
          });;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the result of this promise is a json object similar to next one&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    oauth_access_token: ***,
    oauth_access_token_secret: ***
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;logo-award-graphic-by-a-href-http-www-freepik-com-freepik-a-and-twitter-graphic-by-a-href-http-www-icomoon-io-icomoon-a-from-a-href-http-www-flaticon-com-flaticon-a-are-licensed-under-a-href-http-creativecommons-org-licenses-by-3-0-title-creative-commons-by-3-0-cc-by-3-0-a-made-and-modified-with-a-href-http-logomakr-com-title-logo-maker-logo-maker-a&#34;&gt;logo: Award graphic by &lt;a href=&#34;http://www.freepik.com/&#34;&gt;Freepik&lt;/a&gt; and Twitter graphic by &lt;a href=&#34;http://www.icomoon.io&#34;&gt;Icomoon&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com/&#34;&gt;Flaticon&lt;/a&gt; are licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34;&gt;CC BY 3.0&lt;/a&gt;. Made and modified with &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Maker&#34;&gt;Logo Maker &lt;/a&gt;&lt;/h6&gt;
</description>
    </item>
    
    <item>
      <title>Raw Guid Converter</title>
      <link>http://kanekotic.github.io/project/raw-guid-converter/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/raw-guid-converter/</guid>
      <description>

&lt;h1 id=&#34;logomakr-5c2oee-https-user-images-githubusercontent-com-3071208-41022709-abb95bd6-696a-11e8-8564-3ad7d43d44fb-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/41022709-abb95bd6-696a-11e8-8564-3ad7d43d44fb.png&#34; alt=&#34;logomakr_5c2oee&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kanekotic/raw-guid-converter&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kanekotic/raw-guid-converter.svg?branch=v0.0.2&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://coveralls.io/github/kanekotic/raw-guid-converter?branch=master&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/kanekotic/raw-guid-converter/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/Naereen/StrapDown.js/blob/master/LICENSE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Naereen/StrapDown.js.svg&#34; alt=&#34;GitHub license&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://GitHub.com/Naereen/StrapDown.js/graphs/commit-activity&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg&#34; alt=&#34;Maintenance&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;use-case&#34;&gt;Use Case&lt;/h2&gt;

&lt;p&gt;command line and library to convert guids from oracle raw format to formated guid and viceversa&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;if you want ot use in a package &lt;code&gt;yarn add raw-guid-converter&lt;/code&gt; or &lt;code&gt;npm i raw-guid-converter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;if you want to use it as a command install globally with &lt;code&gt;npm i raw-guid-converter -g&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;raw-to-guid-string&#34;&gt;Raw to Guid String&lt;/h3&gt;

&lt;h4 id=&#34;code&#34;&gt;Code&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const convert = require(&#39;raw-guid-converter&#39;).convertRaw
let guid = convert(&#39;4630880E6D0B3640AB446C6FB3C44FE3&#39;)
//guid =&amp;gt; 0e883046-0b6d-4036-ab44-6c6fb3c44fe3
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;command-line&#34;&gt;Command line&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;convert-guid fromRaw 4630880E6D0B3640AB446C6FB3C44FE3
#0e883046-0b6d-4036-ab44-6c6fb3c44fe3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can pass multiple guids to convert all of them in one go&lt;/p&gt;

&lt;h3 id=&#34;guid-string-to-raw&#34;&gt;Guid string to Raw&lt;/h3&gt;

&lt;h4 id=&#34;code-1&#34;&gt;Code&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const convert = require(&#39;raw-guid-converter&#39;).convertString
let guid = convert(&#39;0e883046-0b6d-4036-ab44-6c6fb3c44fe3&#39;)
//guid =&amp;gt; &#39;4630880E6D0B3640AB446C6FB3C44FE3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;command-line-1&#34;&gt;Command line&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;convert-guid fromString 0e883046-0b6d-4036-ab44-6c6fb3c44fe3
#&#39;4630880E6D0B3640AB446C6FB3C44FE3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can pass multiple guids to convert all of them in one go&lt;/p&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/5c2oEE&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/5c2oEE&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Runtastic Unofficial API</title>
      <link>http://kanekotic.github.io/project/runtastic-unofficial-api/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/runtastic-unofficial-api/</guid>
      <description>

&lt;h1 id=&#34;logomakr-4dzqyb-https-cloud-githubusercontent-com-assets-3071208-23109294-74bb4208-f6dd-11e6-9f09-24e7ac0d9d28-png&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/3071208/23109294/74bb4208-f6dd-11e6-9f09-24e7ac0d9d28.png&#34; alt=&#34;logomakr_4dzqyb&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;This is a promise based unofficial runtastic api.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;installation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm install runtastic-unofficial-api
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use&#34;&gt;Use&lt;/h2&gt;

&lt;p&gt;the API provides the next functionalities&lt;/p&gt;

&lt;h3 id=&#34;authentication&#34;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;Get login information and tokens. The next snippet describes an example of the call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var authenticate = require(&#39;runtastic-unofficial-api&#39;).authenticate

authenticate({email: &amp;lt;email&amp;gt;, password: &amp;lt;password&amp;gt;})
    .then((result) =&amp;gt; console.log(result))
    .catch((result) =&amp;gt; console.log(result))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the complete set of parameters get determined by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &#39;user[email]&#39;: params.email,
    &#39;user[password]&#39;: params.password,
    grant_type: &#39;password&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result of the promise will be if failed the error that caused it and if success an result object similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    authToken: token,
    user: user,
    cookieString: cookieString,
    cookies: cookie
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;workouts&#34;&gt;Workouts&lt;/h3&gt;

&lt;p&gt;Get a list of your workouts. The next snippet describes an example of the call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var workouts = require(&#39;runtastic-unofficial-api&#39;).workouts

var token = &#39;authToken&#39;

workouts({authToken: token, user: user})
    .then((result) =&amp;gt; { console.log(result) })
    .catch((result) =&amp;gt; console.log(result))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the complete set of parameters get determined by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    user_id: params.user.id,
    authenticity_token: params.authToken,
    items: ids.join(&#39;,&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result of the promise will be if failed the error that caused it and if success an result object similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;sessions&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;workout-get&#34;&gt;Workout (get)&lt;/h3&gt;

&lt;p&gt;Get a specific workout. The next snippet describes an example of the call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var workoutGet = require(&#39;runtastic-unofficial-api&#39;).workout.get

var token = &#39;authToken&#39;
var user = {}
var sessions = []

workoutGet(user, sessions[0],{authToken : token, user : user})
    .then((result) =&amp;gt; { console.log(result) })
    .catch((result) =&amp;gt; console.log(result))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the complete set of parameters are determined by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//const defaultIncludes = [&#39;city&#39;,&#39;country&#39;,&#39;creation_application&#39;,&#39;sport_type&#39;,&#39;trace_collection&#39;,&#39;zones&#39;,&#39;sharing_token&#39;,&#39;neighbourhood&#39;]
//var includes = params.includes || defaultIncludes

{
    user_id: params.user.id,
    authenticity_token: params.authToken,
    includes: includes.join(&#39;,&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result of the promise will be if failed the error that caused it and if success an result object that is quite complex to describe just try it ;) .&lt;/p&gt;

&lt;h3 id=&#34;workout-set&#34;&gt;Workout (set)&lt;/h3&gt;

&lt;p&gt;Set (or create) a specific workout. The next snippet describes an example of the call:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var workoutSet = require(&#39;runtastic-unofficial-api&#39;).workout.set

var token = &#39;authToken&#39;
var user = {}
var sessions = []

workoutSet(user, sessions[0] ,{authToken : token, user : user})
    .then((result) =&amp;gt; { console.log(result) })
    .catch((result) =&amp;gt; console.log(result))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the complete set of parameters are determined by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//var duration = params.duration ? moment.duration(params.duration) : moment.duration(0)
//var pause = params.pause ? moment.duration(params.pause) : moment.duration(0)
//var datetime =  params.date ? moment(params.date) : moment()
{
    authenticity_token: params.authToken,
    &#39;run_session[start_time_day]&#39;: datetime.format(&#39;YYYY-MM-DD&#39;),
    &amp;quot;run_session[sport_type_id]&amp;quot;: params.type || 1,
    &amp;quot;run_session[distance]&amp;quot;: params.distance || 0,
    &amp;quot;run_session[distance_from_user]&amp;quot;: params.distance || 0,
    &amp;quot;run_session[elevation_gain]&amp;quot;: params.elevation_gain || 0,
    &amp;quot;run_session[elevation_loss]&amp;quot;: params.elevation_loss || 0,
    &amp;quot;run_session[elevation_gain_from_user]&amp;quot;: params.elevation_gain || 0,
    &amp;quot;run_session[elevation_loss_from_user]&amp;quot;: params.elevation_loss || 0,
    &amp;quot;run_session[start_time_hour]&amp;quot;: datetime.format(&#39;hh&#39;),
    &amp;quot;run_session[start_time_minutes]&amp;quot; : datetime.format(&#39;mm&#39;),
    &amp;quot;run_session[start_time_seconds]&amp;quot;: datetime.format(&#39;ss&#39;),
    &amp;quot;run_session[duration]&amp;quot;: duration.asMilliseconds(),
    &amp;quot;run_session[duration_hours]&amp;quot;: duration.hours(),
    &amp;quot;run_session[duration_minutes]&amp;quot;: duration.minutes(),
    &amp;quot;run_session[duration_seconds]&amp;quot;:duration.seconds(),
    &amp;quot;run_session[pause_duration]&amp;quot;: pause.asMilliseconds(),
    &amp;quot;run_session[pause_duration_hours]&amp;quot;: pause.hours(),
    &amp;quot;run_session[pause_duration_minutes]&amp;quot;: pause.minutes(),
    &amp;quot;run_session[pause_duration_seconds]&amp;quot;: pause.seconds(),
    &amp;quot;run_session[calories]&amp;quot;: params.calories || 0,
    &amp;quot;run_session[calories_from_user]&amp;quot;: params.calories || 0,
    &amp;quot;run_session[avg_cadence]&amp;quot;: params.avg_cadence || undefined,
    &amp;quot;run_session[max_cadence]&amp;quot;:params.max_cadence || undefined,
    &amp;quot;run_session[avg_cadence_from_user]&amp;quot;: params.avg_cadence || undefined,
    &amp;quot;run_session[max_cadence_from_user]&amp;quot;: params.max_cadence || undefined,
    &amp;quot;run_session[total_crank_revolutions]&amp;quot;: params.total_crank_revolutions || undefined,
    &amp;quot;run_session[total_crank_revolutions_from_user]&amp;quot;: params.total_crank_revolutions || undefined,
    &amp;quot;run_session[wheel_circumference]&amp;quot;: params.wheel_circumference || undefined,
    &amp;quot;run_session[wheel_circumference_from_user]&amp;quot;: params.wheel_circumference || undefined,
    &amp;quot;run_session[pulse_avg]&amp;quot;: params.pulse_avg || undefined,
    &amp;quot;run_session[pulse_max]&amp;quot;: params.pulse_max || undefined,
    &amp;quot;run_session[pulse_avg_from_user]&amp;quot;:  params.pulse_avg || undefined,
    &amp;quot;run_session[pulse_max_from_user]&amp;quot;: params.pulse_max || undefined,
    &amp;quot;run_session[temperature]&amp;quot;: params.temperature || 0,
    &amp;quot;run_session[temperature_from_user]&amp;quot;: params.temperature || 0,
    &amp;quot;run_session[notes]&amp;quot;: params.notes || &#39;&#39;,
    &amp;quot;run_session[subjective_feeling_id]&amp;quot;: params.feeling || 5,
    &amp;quot;run_session[weather_condition_id]&amp;quot;: params.weather || 1,
    &amp;quot;run_session[surface_id]&amp;quot; : params.surface || 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result of the promise will be if failed the error that caused it and if success an result object like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ workoutId: &amp;lt;workoutId&amp;gt; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;p&gt;Sports graphic by &lt;a href=&#34;http://www.flaticon.com/authors/freepik&#34;&gt;Freepik&lt;/a&gt; from &lt;a href=&#34;http://www.flaticon.com/&#34;&gt;Flaticon&lt;/a&gt; is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34; title=&#34;Creative Commons BY 3.0&#34;&gt;CC BY 3.0&lt;/a&gt;. Made with &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Maker&#34;&gt;Logo Maker&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;disclaimer-legalese-and-everything-else&#34;&gt;Disclaimer, legalese and everything else.&lt;/h4&gt;

&lt;p&gt;This is not affiliated or endorset by runtastic, or any other party. This software available on the site is provided &amp;ldquo;as is&amp;rdquo; and any expressed or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the user under the pseudonym Kanekotic, or any of their contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scala Local Toggle</title>
      <link>http://kanekotic.github.io/project/scala-local-toggle/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/scala-local-toggle/</guid>
      <description>

&lt;h1 id=&#34;logomakr-6etktj-https-user-images-githubusercontent-com-3071208-32364786-318debc0-c077-11e7-9064-a65d6ce35cf6-png&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3071208/32364786-318debc0-c077-11e7-9064-a65d6ce35cf6.png&#34; alt=&#34;logomakr_6etktj&#34; /&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kanekotic/scala-local-toggle&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kanekotic/scala-local-toggle.svg?branch=master&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;
&lt;a href=&#34;https://maven-badges.herokuapp.com/maven-central/com.github.kanekotic/scala-local-toggle_2.12/badge.svg?style=flat&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://maven-badges.herokuapp.com/maven-central/com.github.kanekotic/scala-local-toggle_2.12/badge.svg?style=flat&#34; alt=&#34;Maven Status&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;feature toggle by configuration file for scala applications&lt;/p&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;//Use version in badge
libraryDependencies += &amp;quot;com.github.kanekotic&amp;quot; %% &amp;quot;scala-local-toggle&amp;quot; % &amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;use&#34;&gt;Use&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Instantiate can be done by newing the class, it can also be register in guice or dependency injection frameworks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val toggle = new ToggleManager();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use default files for loading configuration, it will try to load toggles from the following (first-listed are higher priority):&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;system properties&lt;/li&gt;
&lt;li&gt;application.conf (all resources on classpath with this name)&lt;/li&gt;
&lt;li&gt;application.json (all resources on classpath with this name)&lt;/li&gt;
&lt;li&gt;application.properties (all resources on classpath with this name)&lt;/li&gt;
&lt;li&gt;reference.conf (all resources on classpath with this name)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;this files will require to have an setting for the toggles HOCON or JSON complient configuration similar to this, in any other case toggles will default to false:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;feature.local.toggles: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;NAME_OF_YOUR_TOGGLE&amp;quot;,
      &amp;quot;local&amp;quot;: true
      &amp;quot;development&amp;quot;: true
      &amp;quot;production&amp;quot;: false
    }, 
    {
      &amp;quot;name&amp;quot;: &amp;quot;NAME_OF_OTHER_YOUR_TOGGLE&amp;quot;,
      &amp;quot;local&amp;quot;: true
      &amp;quot;development&amp;quot;: false
      &amp;quot;production&amp;quot;: false
    }
  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the boolean denotes the state of the toggle depending on the environment, and the name is the identifying the value of the environment variable:
- local maps to environment variable value LOCAL.
- development maps to environment variable value DEVELOPMENT.
- production maps to environment variable value PRODUCTION.&lt;/p&gt;

&lt;p&gt;aditionally the enviroment variable that will be track to know the current environment of execution can be modified by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hocon&#34;&gt;  feature.local.environment: &amp;quot;SOME_ENVIROMENT_VARIABLE_NAME&amp;quot;
  #Defaults to ENVIRONMENT 
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Use with the name identifier defined in the previous step&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  if (toggle.isEnabled(&amp;quot;NAME_OF_YOUR_TOGGLE&amp;quot;)) {
    //your code under toggle here
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;logo&#34;&gt;LOGO&lt;/h5&gt;

&lt;p&gt;Check out the new logo that I created on &lt;a href=&#34;http://logomakr.com&#34; title=&#34;Logo Makr&#34;&gt;LogoMakr.com&lt;/a&gt; &lt;a href=&#34;https://logomakr.com/6ETKtj&#34; target=&#34;_blank&#34;&gt;https://logomakr.com/6ETKtj&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sonarqube Upgrade Error due LDAP</title>
      <link>http://kanekotic.github.io/post/04-18-sonarqube-update-when-ldapmd/</link>
      <pubDate>Thu, 17 Mar 2016 09:56:49 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/04-18-sonarqube-update-when-ldapmd/</guid>
      <description>&lt;p&gt;While upgrading Sonarqube i am getting the next error message&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An error happened, some parts of the page might not render correctly. Please contact the administrator if you keep on experiencing this error&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see the message is not to explicit, in reality it doesnt have anything to do with reality. In my case i had copy as per the instructions the &lt;code&gt;sonar.properties&lt;/code&gt; file. after searching i fouund this discussion &lt;a href=&#34;https://groups.google.com/forum/#!topic/sonarqube/clYmLXuz7Nk&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem at this point became clear, LDAP is a plugin inside Sonarqube. During the upgrade process the plugins must have not been loaded causing an unidentified section in the upgrade.&lt;/p&gt;

&lt;p&gt;The solution is simple:
1. Comment the LDAP section.
2. Go through the upgrade process of Sonarqube.
3. Stop Sonarqube.
4. Uncomment LDAP section.
5. Start Sonarqube.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu not restarting or turning off</title>
      <link>http://kanekotic.github.io/post/04-17-ubuntu-not-turning-off-or-restartingmd/</link>
      <pubDate>Thu, 17 Mar 2016 09:56:49 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/04-17-ubuntu-not-turning-off-or-restartingmd/</guid>
      <description>&lt;p&gt;Lately I have been getting tired of my operating system just not wanting to reboot or sometimes not turning off. This happens in my version off ubuntu due a problem with the energy management.
The way to solve this is changing the boot parameters for the operating system. So you will need to follow the next steps:
1. Edit the grub settings file (if you use nano as at the end do CTRL+O to save CTRL+X to close)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/default/grub
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Eddit the next line to look similar to the next one.
&lt;code&gt;
GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash acpi=force reboot=pci&amp;quot;
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call the command line to update the grub (os selector for operating system)
&lt;code&gt;
sudo update-grub
&lt;/code&gt;
first reboot this will not make any difference but after your first reboot as the computer will boot with the new parameters this should solve the issue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Disclaimer: this works in my case, every installation in different hardware than the one in my computer could have different outcomes (that i cannot be held accountable for, so use at your discretion), including  booting issues that you might solve by removing the previous parameters before booting Ubuntu from grub.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unit Test CheatSheet</title>
      <link>http://kanekotic.github.io/post/03-02-unit-test-cheatsheet/</link>
      <pubDate>Wed, 02 Mar 2016 09:56:49 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/03-02-unit-test-cheatsheet/</guid>
      <description>&lt;p&gt;##&lt;strong&gt;mstest&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;links:
* &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.assert.aspx&#34; target=&#34;_blank&#34;&gt;assert&lt;/a&gt;
* &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/microsoft.visualstudio.testtools.unittesting.collectionassert.aspx&#34; target=&#34;_blank&#34;&gt;collection assert&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##&lt;strong&gt;Nunit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;links:
* &lt;a href=&#34;https://github.com/nunit/docs/wiki/Attributes&#34; target=&#34;_blank&#34;&gt;Attributes&lt;/a&gt;
* &lt;a href=&#34;https://github.com/nunit/docs/wiki/Assertions&#34; target=&#34;_blank&#34;&gt;Assertion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;##&lt;strong&gt;MOQ&lt;/strong&gt;
Example&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public interface IFoo {
   public bool DoSomething(string);
}

int calls;
var mock = new Mock&amp;lt;IFoo&amp;gt;();
mock.Setup(foo =&amp;gt; foo.DoSomething(It.IsAny&amp;lt;string&amp;gt;())).
         Returns((string s) =&amp;gt; s.ToLower())
         .Callback(() =&amp;gt; ++calls);

mock.SetupProperty(f =&amp;gt; f.Name, &amp;quot;foo&amp;quot;);
mock.VerifySet(foo =&amp;gt; foo.Name = &amp;quot;foo&amp;quot;);

mock.Verify(foo =&amp;gt; foo.DoSomething(It.IsAny&amp;lt;string&amp;gt;()), Times.Never());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##&lt;strong&gt;Test internal Classes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In assembly info to test internal classes you will need to know the name of the file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;[assembly: InternalsVisibleToAttribute(&amp;quot;&amp;lt;Project Name&amp;gt;&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Meteor - FlowRouter</title>
      <link>http://kanekotic.github.io/post/02-05-meteor-flowrouter/</link>
      <pubDate>Fri, 05 Feb 2016 09:56:49 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/02-05-meteor-flowrouter/</guid>
      <description>&lt;p&gt;This package is a very useful to define the navigation on your client side application. To add it just use the next command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor add kadira:flow-router
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a static route can be done as the next code. Where name needs to be a unique identifier, and the render string has to be the name of the template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;FlowRouter.route(&#39;/&#39;,
{
  name: &#39;homeId&#39;,
  action(){
    BlazeLayout.render(&#39;homeTemplate&#39;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in case of requiring a dynamic page. Where the change is just the second objects where you defined the child template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;FlowRouter.route(&#39;/&#39;,
{
  name: &#39;mainId&#39;,
  action(){
    BlazeLayout.render(&#39;mainTemplate&#39;, {mainTemplate: &#39;dynamicTemplate&#39;});
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other interesting parts of this package is the definition of variables on the route definition (like :id in the next code).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;FlowRouter.route(&#39;/playlist/:id&#39;,
{
  name: &#39;playlist&#39;,
  action(){
    BlazeLayout.render(&#39;main&#39;, {main: &#39;playlist&#39;});
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;there is also a possibility to use it in any part of the client javascript code to do redirection by using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;FlowRouter.go(&#39;home&#39;);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>C# - Path.Combine</title>
      <link>http://kanekotic.github.io/post/02-04-csharp-path-combine/</link>
      <pubDate>Thu, 04 Feb 2016 09:56:49 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/02-04-csharp-path-combine/</guid>
      <description>

&lt;p&gt;When using path.Combine if the second argument starts with a /. the first path is ignored and will give a path based on the C: drive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var path = Path.Combine(firstpath,$@&amp;quot;\myfolder\myfile.txt&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will not return &lt;firstpath\myfolder\myfile.txt&gt; will return &lt;C:\\\myfolder\myfile.txt&gt;.&lt;/p&gt;

&lt;h2 id=&#34;meteor-session-variables&#34;&gt;&lt;strong&gt;Meteor - Session variables&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Session variables are easy to use in meteor. the can ve get and set from the javascript code using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Session.get(&#39;variableName&#39;);
Session.set(&#39;variableName&#39;, true);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;on your HTML you can reference the get method easily by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;template name=&amp;quot;admin&amp;quot;&amp;gt;
    {{#if $.Session.get &#39;variableName&#39;}}
        I am here
    {{else}}
        I am not here
    {{/if}}
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Meteor - Session variables</title>
      <link>http://kanekotic.github.io/post/02-04-meteor-session-variables/</link>
      <pubDate>Thu, 04 Feb 2016 09:56:49 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/02-04-meteor-session-variables/</guid>
      <description>&lt;p&gt;Session variables are easy to use in meteor. the can ve get and set from the javascript code using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Session.get(&#39;variableName&#39;);
Session.set(&#39;variableName&#39;, true);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;on your HTML you can reference the get method easily by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;template name=&amp;quot;admin&amp;quot;&amp;gt;
    {{#if $.Session.get &#39;variableName&#39;}}
        I am here
    {{else}}
        I am not here
    {{/if}}
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Meteor - Query subdocument</title>
      <link>http://kanekotic.github.io/post/02-03-meteor-query-subdocument/</link>
      <pubDate>Wed, 03 Feb 2016 09:56:49 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/02-03-meteor-query-subdocument/</guid>
      <description>&lt;p&gt;To make a query over a subdocument in meteor is not posible to use directly the &amp;lsquo;$&amp;rsquo; or &amp;lsquo;$elemMatch&amp;rsquo; notation. It is necesary to use the keyword &amp;lsquo;fields:&amp;rsquo; to do this. To publish just part of a mongo document you should do a query similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Meteor.publish(&#39;chapter&#39;, function(id, name){
  check(id,String);
  check(name,String);
  return Playlists.find({ _id: id }, { fields: { chapters: { $elemMatch: { name: name }}}});
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That from the original document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;_id&amp;quot;: &amp;quot;cx8cmw5KMjHQm8czw&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;Test&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;this is a test&amp;quot;,
  &amp;quot;chapters&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;First chapter&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;this is a video about blah blah blah&amp;quot;,
      &amp;quot;video&amp;quot;: {
        &amp;quot;youtube&amp;quot;: &amp;quot;yoAFDy1WS94&amp;quot;
      }
    },
    {
      &amp;quot;name&amp;quot;: &amp;quot;Second chapter&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;this is a video about blah blah blah&amp;quot;,
      &amp;quot;video&amp;quot;: {
        &amp;quot;youtube&amp;quot;: &amp;quot;yoAFDy1WS94&amp;quot;
      }
    }
  ],
  &amp;quot;createdAt&amp;quot;: &amp;quot;2016-02-03T07:18:52.371Z&amp;quot;,
  &amp;quot;isPublic&amp;quot;: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will return:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;_id&amp;quot;: &amp;quot;cx8cmw5KMjHQm8czw&amp;quot;,
  &amp;quot;chapters&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;First chapter&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;this is a video about blah blah blah&amp;quot;,
      &amp;quot;video&amp;quot;: {
        &amp;quot;youtube&amp;quot;: &amp;quot;ldkfkfkdlfjdkf&amp;quot;
      }
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is useful if you have big documents or don&amp;rsquo;t want the complexity of having 2 different collections that need to be related. It will help with the performance and resources that your application uses.&lt;/p&gt;

&lt;p&gt;now if you want to use the sub-document in your UI, you should just subscribe and add a helper to access this array item, like for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Template.chapter.onCreated(function(){
  var self = this;
  self.autorun(function(){
    var id = FlowRouter.getParam(&#39;id&#39;);
    var name = FlowRouter.getParam(&#39;name&#39;);
    self.subscribe(&#39;chapter&#39;, id, name);
  });
});

Template.chapter.helpers({
  chapter: () =&amp;gt; {
      return Playlists.findOne({}).chapters[0];
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally your HTML just needs to reference the helper defined to show the information&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;template name=&amp;quot;chapter&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;chapter-body&amp;quot;&amp;gt;
        &amp;lt;h3&amp;gt;{{ chapter.name }}&amp;lt;/h3&amp;gt;
        &amp;lt;iframe width=&amp;quot;560&amp;quot; height=&amp;quot;315&amp;quot; class=&amp;quot;video&amp;quot;
          src=&amp;quot;https://www.youtube.com/embed/{{ chapter.video.youtube }}&amp;quot;
          frameborder=&amp;quot;0&amp;quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
        {{ #markdown }}{{ chapter.description }}{{ /markdown }}
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TFS 2015 - vnext and sonarqube integration</title>
      <link>http://kanekotic.github.io/post/02-01-vnext-sonarqube-integration/</link>
      <pubDate>Mon, 01 Feb 2016 09:56:49 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/02-01-vnext-sonarqube-integration/</guid>
      <description>&lt;p&gt;The modifications required to use the integrated sonarqube steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;On your administration panel add a new Generic Endpoint with the connection name you decide and the sonarqube server address.
&lt;img src=&#34;Resources/sonarqube2.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the start step as per the next image&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;select the endpoint configured before&lt;/li&gt;
&lt;li&gt;Add the project parameters:

&lt;ul&gt;
&lt;li&gt;key (this is an unique identifier).&lt;/li&gt;
&lt;li&gt;Name (display name for your software).&lt;/li&gt;
&lt;li&gt;Version (related software version).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;Resources/sonarqube1.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C# - Paths to system folders</title>
      <link>http://kanekotic.github.io/post/01-29-csharp-path-to-system-folders/</link>
      <pubDate>Fri, 29 Jan 2016 09:56:49 +0200</pubDate>
      
      <guid>http://kanekotic.github.io/post/01-29-csharp-path-to-system-folders/</guid>
      <description>&lt;p&gt;In the Environment class there is a property called SpecialFolder. This will provide the paths to folders like: Program files, desktop, AppData, etc. The use is the next one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Environment.SpecialFolder.&amp;lt;NameSpecialFolder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;NameSpecialFolder&gt; is the given name of the folder required, for example the AppData Local folder will be&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Environment.SpecialFolder.LocalApplicationData
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
