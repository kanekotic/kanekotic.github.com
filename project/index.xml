<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Kanekotic</title>
    <link>http://kanekotic.github.io/project/</link>
    <description>Recent content in Projects on Kanekotic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 30 Jul 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://kanekotic.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Express Exception Handler</title>
      <link>http://kanekotic.github.io/project/express-exception-handler/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/express-exception-handler/</guid>
      <description>Motivation This package was created to add a general way to handle exception for express application with the expectation to make it simpler to handle all possible requests.
Installation add it to your project with npm install express-exception-handler or yarn add express-exception-handler
Use there are 2 diferent ways to integrate the main functionality of this package, either by adding the handle that gets injected to the router framework</description>
    </item>
    
    <item>
      <title>Gatoo</title>
      <link>http://kanekotic.github.io/project/gatoo/</link>
      <pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/gatoo/</guid>
      <description>This project will provide a command line and a library to export google analytics to your prefered endpoint (console, log management, or db).
Use as Command Line install globally with npm install gatoo -g. Aftyer this it can be run with the next command:
gatoo console &amp;lt;email&amp;gt; &amp;lt;ReplativePath&amp;gt; &amp;lt;viewId&amp;gt; &amp;lt;startDate&amp;gt; &amp;lt;endDate&amp;gt; &amp;lt;metrics&amp;gt; &amp;lt;dimensions&amp;gt;  Use as library first step is to add this to your project throught yarn add gatoo or npm install gatoo</description>
    </item>
    
    <item>
      <title>ELK Docker</title>
      <link>http://kanekotic.github.io/project/elk-docker/</link>
      <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/elk-docker/</guid>
      <description>This show how multiple containers can aggregate log to logging infrastructure with docker compose using logstash, elastic search and kibana
Run you will need docker installed in your computer, after it :
 Run  docker-compose up   run to get some logs from httpd  repeat 10 curl http://localhost:80/   Kibana:
 this might take a bit Navigate to http://localhost:5601 Add logstash-* as index with @timestamp as Time-field name Go to Discover  Grafana:</description>
    </item>
    
    <item>
      <title>Travis YML Plugin</title>
      <link>http://kanekotic.github.io/project/travis-yml-plugin/</link>
      <pubDate>Fri, 30 Jun 2017 00:00:01 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/travis-yml-plugin/</guid>
      <description>This plugin has been done to be able to have certain level of compatibility in between Jenkins, Travis-CI and other YML based build services.
Use Install by navigating and selecting Manage Jenkins -&amp;gt; Manage Plugins -&amp;gt; Travis YML Plugin
Add to your workspace on the root folder a .travis.yml, this plugin accept the next phases of lifecycle:
 before_install install before_script script after_success after_failure before_deploy deploy after_deploy after_script  If you have any failure on your build and want to review the final generated, you should declare the environment variable DEBUG_TRAVIS_YML either on your build node or in jenkins.</description>
    </item>
    
    <item>
      <title>PlayYoutube Atom</title>
      <link>http://kanekotic.github.io/project/playyotube-atom/</link>
      <pubDate>Thu, 29 Jun 2017 01:01:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/playyotube-atom/</guid>
      <description>Search and play youtube videos inside atom. Follow your favorite tutorials inside the development environment in a floating window
Use  &amp;lsquo;playyoutube-atom:search&amp;rsquo; (&amp;lsquo;ctrl-shift-y&amp;rsquo;): Display the search window:  input some search terms and hit enter. Navigate the results: Using the mouse. Using up and down key. Play video: Click. Using side key.  &amp;lsquo;playyoutube-atom:hide&amp;rsquo; (&amp;lsquo;ctrl-shift-h&amp;rsquo;): Hides the player &amp;lsquo;playyoutube-atom:show&amp;rsquo; (&amp;lsquo;ctrl-shift-j&amp;rsquo;): Shows the player &amp;lsquo;playyoutube-atom:close&amp;rsquo; (&amp;lsquo;ctrl-shift-c&amp;rsquo;): Clear current search and video content  Authors and Contributors @kanekotic</description>
    </item>
    
    <item>
      <title>PlayYoutube Visual Studio</title>
      <link>http://kanekotic.github.io/project/playyotube-vs/</link>
      <pubDate>Thu, 29 Jun 2017 01:00:10 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/playyotube-vs/</guid>
      <description>Plugin for Visual studio that allows you to search and play youtube videos inside your development enviroment.
follow tutorials or listen what you want, without the pain of having to toggle between multiple windows.
Use put your query on the search combo box and hit enter. You will be provided with a list of results, the selected results will be displayed and be streamed
Authors and Contributors @kanekotic</description>
    </item>
    
    <item>
      <title>Search Error On</title>
      <link>http://kanekotic.github.io/project/search-error-on/</link>
      <pubDate>Thu, 29 Jun 2017 01:00:10 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/search-error-on/</guid>
      <description>This plugin for visual studio has been created to be able to find the errors generated during compilation time on your favourite web browser.
Use Select one or more errors in your Error List Window. Right click and hit &amp;lsquo;Search Error On&amp;rsquo;.
Configure Under &amp;lsquo;Tools -&amp;gt; Options-&amp;gt; Search Error On&amp;rsquo; you will be able to select one of your favourite search engines. Authors and Contributors @kanekotic
Support or Contact Having trouble with &amp;lsquo;Search Error On&amp;hellip;&amp;rsquo;?</description>
    </item>
    
    <item>
      <title>Raw Guid Converter</title>
      <link>http://kanekotic.github.io/project/raw-guid-converter/</link>
      <pubDate>Thu, 29 Jun 2017 01:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/raw-guid-converter/</guid>
      <description>Use Case command line and library to convert guids from oracle raw format to formated guid and viceversa
Installation if you want ot use in a package yarn add raw-guid-converter or npm i raw-guid-converter
if you want to use it as a command install globally with npm i raw-guid-converter -g
Usage Raw to Guid String Code const convert = require(&#39;raw-guid-converter&#39;).convertRaw let guid = convert(&#39;4630880E6D0B3640AB446C6FB3C44FE3&#39;) //guid =&amp;gt; 0e883046-0b6d-4036-ab44-6c6fb3c44fe3  Command line convert-guid fromRaw 4630880E6D0B3640AB446C6FB3C44FE3 #0e883046-0b6d-4036-ab44-6c6fb3c44fe3  you can pass multiple guids to convert all of them in one go</description>
    </item>
    
    <item>
      <title>Any Prebuilt</title>
      <link>http://kanekotic.github.io/project/any-prebuilt/</link>
      <pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/any-prebuilt/</guid>
      <description>Mission Easy generation or integration of prebuilt packages. It helps fetchs prebuilt binaries from github releases.
Generate a prebuilt package  Create new project  npm init   Add this package as dependency  npm install any-prebuilt --save   Create postinstall.js file with content:  require(&#39;any-prebuilt&#39;).install(require(&#39;./package.json&#39;).prebuilt)   Create index.js file with content:  var anyPrebuilt = require(&#39;any-prebuilt&#39;) anyPrebuilt.initialize(__dirname, require(&#39;./package.json&#39;).prebuilt) module.exports.path = anyPrebuilt.path   On the package.</description>
    </item>
    
    <item>
      <title>Koteky</title>
      <link>http://kanekotic.github.io/project/koteky/</link>
      <pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/koteky/</guid>
      <description>This is a plugin based crossplatform social network manager application based on electron.
Usage (Alpha) This project is still on development and is not ready for public use
 Current early use can be done by cloning repo  # Clone the repository $ git clone https://github.com/Hatisoft/koteky.git   Plugins can be installed in app or modifying the package.json  { ... &amp;quot;plugins&amp;quot;: { &amp;quot;name_of_plugin&amp;quot; : &amp;quot;version_or_repo&amp;quot; } }   Run:  # Go into the repository $ cd koteky # Install the dependencies and run $ npm install &amp;amp;&amp;amp; npm start  Roadmap Use plugin based architecture Style and Display posts Authentication based on Oauth for social networks Implement Twitter plugin Implement Facebook plugin Implement LinkedIn plugin  Credits Social Network graphic by Freepik from Flaticon is licensed under CC BY 3.</description>
    </item>
    
    <item>
      <title>Scala Local Toggle</title>
      <link>http://kanekotic.github.io/project/scala-local-toggle/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:01 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/scala-local-toggle/</guid>
      <description>feature toggle by configuration file for scala applications
Install //Use version in badge libraryDependencies += &amp;quot;com.github.kanekotic&amp;quot; %% &amp;quot;scala-local-toggle&amp;quot; % &amp;lt;version&amp;gt;  Use  Instantiate can be done by newing the class, it can also be register in guice or dependency injection frameworks.
val toggle = new ToggleManager();  use default files for loading configuration, it will try to load toggles from the following (first-listed are higher priority):</description>
    </item>
    
    <item>
      <title>Dependency Shrinker</title>
      <link>http://kanekotic.github.io/project/dependency-shrinker/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/dependency-shrinker/</guid>
      <description>Mission a command line tool to check what dependencies of an executable are really critical and not
Installation npm install dependency-shrinker  use this command will list the runtime dependencies that can be possible removed (will only detect the ones that will cause a crash if removed).
depshrink list &amp;lt;Path to executable&amp;gt; &amp;lt;boot time&amp;gt; [Paths to dependencies folders]  Warning if you kill the process of the command line tool at any point of execution you might end up in a situation where a dependency is missing.</description>
    </item>
    
    <item>
      <title>MailCrypt</title>
      <link>http://kanekotic.github.io/project/mail-crypt/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/mail-crypt/</guid>
      <description>Motivation Engine and electron app that allows to add pgp encrytion to gmail. To ensure privacy of data.
Logo Check out the new logo that I created on LogoMakr.com https://logomakr.com/9AMIGX</description>
    </item>
    
    <item>
      <title>DynamoDB CLI</title>
      <link>http://kanekotic.github.io/project/dynamo-cli/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/dynamo-cli/</guid>
      <description>dynamo operations command line (In development not production ready, use with caution.)
Use Case provides a easy to use command line interface to interact with DynamoDb.
Supported commands current implementation requires you to have correct setup of enviroment variables logind for aws in your command line.
Upload from CSV dynamo-cli upload &amp;lt;path to csv&amp;gt;  TODO Add more credentials support Add download Command TBD  Logo Check out the new logo that I created on LogoMakr.</description>
    </item>
    
    <item>
      <title>CabritoBot</title>
      <link>http://kanekotic.github.io/project/cabrito-bot/</link>
      <pubDate>Tue, 30 May 2017 00:01:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/cabrito-bot/</guid>
      <description>Mission Easy generation or integration of prebuilt packages. It helps fetchs prebuilt binaries from github releases.
Generate a prebuilt package  Create new project  npm init   Add this package as dependency  npm install any-prebuilt --save   Create postinstall.js file with content:  require(&#39;any-prebuilt&#39;).install(require(&#39;./package.json&#39;).prebuilt)   Create index.js file with content:  var anyPrebuilt = require(&#39;any-prebuilt&#39;) anyPrebuilt.initialize(__dirname, require(&#39;./package.json&#39;).prebuilt) module.exports.path = anyPrebuilt.path   On the package.</description>
    </item>
    
    <item>
      <title>LittleBox</title>
      <link>http://kanekotic.github.io/project/little-box/</link>
      <pubDate>Tue, 30 May 2017 00:00:10 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/little-box/</guid>
      <description>Augmented reality project, spawns a rose on a glyph.
LOGO Check out the new logo that I created on LogoMakr.com https://logomakr.com/1p2i5d</description>
    </item>
    
    <item>
      <title>Coin Run</title>
      <link>http://kanekotic.github.io/project/coin-run/</link>
      <pubDate>Tue, 30 May 2017 00:00:01 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/coin-run/</guid>
      <description>Coin Run Run and Jump around without touching the stones to get as many coins as you can. Use the accelerometer and tap the screen. This is my first app, so very simple game. Developed using: - Unreal Engine - Kenney 2D Assests</description>
    </item>
    
    <item>
      <title>Runtastic Unofficial API</title>
      <link>http://kanekotic.github.io/project/runtastic-unofficial-api/</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/runtastic-unofficial-api/</guid>
      <description>This is a promise based unofficial runtastic api.
installation npm install runtastic-unofficial-api  Use the API provides the next functionalities
Authentication Get login information and tokens. The next snippet describes an example of the call:
var authenticate = require(&#39;runtastic-unofficial-api&#39;).authenticate authenticate({email: &amp;lt;email&amp;gt;, password: &amp;lt;password&amp;gt;}) .then((result) =&amp;gt; console.log(result)) .catch((result) =&amp;gt; console.log(result))  the complete set of parameters get determined by:
{ &#39;user[email]&#39;: params.email, &#39;user[password]&#39;: params.password, grant_type: &#39;password&#39; }  The result of the promise will be if failed the error that caused it and if success an result object similar to this:</description>
    </item>
    
    <item>
      <title>Nike Unofficial API</title>
      <link>http://kanekotic.github.io/project/nike-unofficial-api/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/nike-unofficial-api/</guid>
      <description>unofficial nike api
This is a promise based unofficial nikeplus api.
installation npm install nike-unofficial-api  Use the API provides the next functionalities
Authentication Get login information and tokens. The next snippet describes an example of the call:
var authenticate = require(&#39;nike-unofficial-api&#39;).authenticate authenticate({email: &amp;lt;email&amp;gt;, password: &amp;lt;password&amp;gt;}) .then((result) =&amp;gt; console.log(result)) .catch((result) =&amp;gt; console.log(result))  the complete set of parameters get determined by:
{ email: params.email, password: params.password }  The result of the promise will be if failed the error that caused it and if success an result object similar to this:</description>
    </item>
    
    <item>
      <title>Endomondo Unofficial API</title>
      <link>http://kanekotic.github.io/project/endomondo-unofficial-api/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/endomondo-unofficial-api/</guid>
      <description>This is a promise based unofficial endomondo api.
installation npm install endomondo-unofficial-api  Use the API provides the next functionalities
Authentication Get login information and tokens. The next snippet describes an example of the call:
var authenticate = require(&#39;endomondo-unofficial-api&#39;).authenticate authenticate({email: &amp;lt;email&amp;gt;, password: &amp;lt;password&amp;gt;}) .then((result) =&amp;gt; console.log(result)) .catch((result) =&amp;gt; console.log(result))  the complete set of parameters get determined by:
{ email: params.email, password: params.password, deviceId: params.uuid || uuid, country: params.</description>
    </item>
    
    <item>
      <title>OAuth Electron</title>
      <link>http://kanekotic.github.io/project/oauth-electron/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/oauth-electron/</guid>
      <description>this package is currently in development and is not available for use
Use OAuth in a simple way inside your electron App.
Installation add it to your elenctron project using npm command
npm install oauth-electron --save  Usage Oauth1 add the require for ouath and twitter specific code from this package
var oauth = require(&#39;oauth-electron-twitter&#39;).oauth2; var data = require(&#39;oauth-electron-twitter&#39;).oauth2_data;  use or extend the oauth object as per your requirements</description>
    </item>
    
    <item>
      <title>OAuth Electron Facebook</title>
      <link>http://kanekotic.github.io/project/oauth-electron-facebook/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/oauth-electron-facebook/</guid>
      <description>this package is currently in development and is not available for use
Use Facebook OAuth in a simple way inside your electron App.
Installation add it to your elenctron project using npm command
npm install oauth-electron-facebook --save  Usage add the require for ouath and twitter specific code from this package
var oauth = require(&#39;oauth-electron-facebook&#39;).oauth; var facebook = require(&#39;oauth-electron-facebook&#39;).facebook;  declare a twitter object, and use it as parameter for the oauth in conjuntion with the electron window used to display the login</description>
    </item>
    
    <item>
      <title>OAuth Electron Twitter</title>
      <link>http://kanekotic.github.io/project/oauth-electron-twitter/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/oauth-electron-twitter/</guid>
      <description>Use Twitter OAuth in a simple way inside your electron App.
Installation add it to your elenctron project using npm command
npm install oauth-electron-twitter --save  Usage add the require for ouath and twitter specific code from this package
var oauth = require(&#39;oauth-electron-twitter&#39;).oauth; var twitter = require(&#39;oauth-electron-twitter&#39;).twitter;  declare a twitter object, and use it as parameter for the oauth in conjuntion with the electron window used to display the login.</description>
    </item>
    
    <item>
      <title>Peer2Sync</title>
      <link>http://kanekotic.github.io/project/peer-2-sync/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/peer-2-sync/</guid>
      <description>##Intro
Protocol capable of P2P (master to master) syncing key-value datastores. using c++ high performance web server with a redis backend. The path to requests is /rpc and takes only POST requests in JSON-RPC 2.0. The methods that have been implemented are:
 datastorePut({ collection: String, changes: [Object] }) -&amp;gt;: sync objects to the server. datastoreGet({ collection: String, all: Boolean, ids: [String] }) -&amp;gt; [Object]: retrieve all of the objects which are newer on the server.</description>
    </item>
    
    <item>
      <title>Specflow.Rider</title>
      <link>http://kanekotic.github.io/project/specflow-rider/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/specflow-rider/</guid>
      <description>Intent Integration of Specflow autogeneration for Rider
Setup clone this repo, and make sure you have intellij installed the community version should be enough. you can use the next Gradle commands from command line:
gradle compile # generate the code gradle check # gnerate the code and test  TODO Table Support Parameters Support Move to Rider style plugin XUnit Support MSTest Support Add Files to project  Logo Check out the new logo that I created on LogoMaker.</description>
    </item>
    
    <item>
      <title>Vue Atom Template</title>
      <link>http://kanekotic.github.io/project/vue-atom-template/</link>
      <pubDate>Mon, 29 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/vue-atom-template/</guid>
      <description>this is a template for generating a package using vue as rendering framework
Logo Check out the new logo that I created on LogoMakr.com https://logomakr.com/3lbtkb</description>
    </item>
    
    <item>
      <title>Gtimecarder</title>
      <link>http://kanekotic.github.io/project/gtimecarder/</link>
      <pubDate>Sun, 29 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://kanekotic.github.io/project/gtimecarder/</guid>
      <description>chrome extension to fill timecard systems from google calendar
LOGO Check out the new logo that I created on LogoMakr.com https://logomakr.com/5UdULo</description>
    </item>
    
  </channel>
</rss>